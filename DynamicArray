import ctypes

class DynamicArray:
    """A dynamic array class"""

    def __init__(self):
        self._n = 0
        self._capacity = 1
        self._A = self._make_array(self._capacity)

    def __str__(self):
        tmp = []
        for i in range(self._n):
            tmp.append(self._A[i])
        return str(tmp)

    def _make_array(self, c):
        return (c * ctypes.py_object)()

    def size(self):
        return self._n

    def capacity(self):
        return self._capacity

    def is_empty(self):
        return self._n == 0

    def at(self, index):
        if index < self._n:
            return self._A[index]
        else:
            raise IndexError('Index is out of bounds')

    def push(self, val):
        self._resize()
        self._A[self._n] = val
        self._n += 1

    def insert(self, index, value):
        if index < self._n:
            self.push(self._A[self._n - 1])
            prev = value
            for i in range(index, self._n - 1):
                curr = self._A[i]
                self._A[i] = prev
                prev = curr
        else:
            raise IndexError('Index is out of bounds')

    def prepend(self, value):
        self.insert(0, value)

    def pop(self):
        if self._n > 0:
            self._resize()
            tmp = self._A[self._n - 1]
            self._n -= 1
            return tmp

    def delete(self, index):
        if index < self._n:
            for i in range(index, self._n - 1):
                self._A[i] = self._A[i + 1]
            self.pop()
        else:
            raise IndexError('Index is out of bounds')

    def remove(self, value):
        i = 0
        while i < self._n:
            if self._A[i] == value:
                self.delete(i)
            else:
                i += 1

    def find(self, item):
        for i in range(self._n):
            if self._A[i] == item:
                return i
        return -1

    def _resize(self):
        if self._n == self._capacity:
            self._capacity *= 2
            tmp = self._make_array(self._capacity)
            for i in range(self._n):
                tmp[i] = self._A[i]
            self._A = tmp
        elif self._n < (self._capacity // 4):
            self._capacity //= 2
            tmp = self._make_array(self._capacity)
            for i in range(self._n):
                tmp[i] = (self._A[i])
            self._A = tmp
